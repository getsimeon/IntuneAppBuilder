schedules:
- cron: "30 7 * * *"
  displayName: Daily job
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  Verbosity: 'normal'

stages:
- stage: Build
  jobs:
  - job:
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        arguments: '--configuration $(BuildConfiguration) --verbosity $(Verbosity)'

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        arguments: '--configuration $(BuildConfiguration) --verbosity $(Verbosity) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: pack
        verbosityPack: $(Verbosity)
        packagesToPack: '*.sln'
        configurationToPack: $(BuildConfiguration)
        nobuild: true

    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        arguments: '--configuration $(BuildConfiguration) --no-build --verbosity $(Verbosity) -o $(Build.ArtifactStagingDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
        modifyOutputPath: true
        projects: '**/*/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        arguments: '--configuration $(BuildConfiguration) --no-build --verbosity $(Verbosity)'
      env:
        Version: $(GitVersion.SemVer)
        AadAuth:Password: $(AadAuth:Password)

    - task: PublishPipelineArtifact@1
      displayName: Publish pipeline artifacts
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: Build
      condition: always()

- stage: DeployNuGet
  displayName: Deploy to nuget.org
  jobs:
  - deployment:
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |
              $versionInfo = gci '$(Pipeline.Workspace)' *.nupkg -Recurse |% { $file = $_; $_.Name | Select-String -Pattern '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$' |%{ $_.Matches[0] } |% { @{ Path = $file.FullName; Name = $_.Groups[1].Value; Version = $_.Groups[2].Value } } }
              $versionInfo |% {
                if (Find-Package $_.Name -RequiredVersion $_.Version -Source https://api.nuget.org/v3/index.json -EA SilentlyContinue) {
                  $message = "$($_.Path) already exists in nuget.org - skipping"
                  Write-Warning $message
                  Write-Host "##vso[task.logissue type=warning]$message"
                  Remove-Item $_.Path
                }
                else {
                  Write-Host "$($_.Path) does not exist in nuget.org - will push"
                }
              }
            displayName: Exclude duplicate package versions

          - task: NuGetCommand@2
            condition: eq(variables['Build.SourceBranchName'], 'master')
            displayName: NuGet push
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'nuget.org'
              allowPackageConflicts: true
              continueOnError: true